{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/adity/chat-mcp-nextjs/app/api/chat/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { OpenAI } from \"openai\";\r\nimport { OpenAIToolSet } from \"composio-core\";\r\n\r\nconst toolset = new OpenAIToolSet();\r\nconst client = new OpenAI({\r\n  apiKey: process.env.OPENAI_API_KEY,\r\n});\r\n\r\nexport async function POST(req: NextRequest) {\r\n  const { messages } = await req.json();\r\n\r\n  const userQuery = messages[messages.length - 1]?.content;\r\n  if (!userQuery) {\r\n    return NextResponse.json(\r\n      { error: \"No user query found in request\" },\r\n      { status: 400 },\r\n    );\r\n  }\r\n\r\n  try {\r\n    const tools = await toolset.getTools({\r\n      // You can directly specify multiple apps like so, but doing so might\r\n      // result in > 128 tools, but openai limits on 128 tools\r\n      // apps: [\"gmail\", \"slack\"],\r\n      //\r\n      // Or, single apps like so:\r\n      // apps: [\"gmail\"],\r\n      //\r\n      // Or, directly specifying actions like so:\r\n      // actions: [\"GMAIL_SEND_EMAIL\", \"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL\"],\r\n\r\n      // Gmail and Linear does not cross the tool limit of 128 when combined\r\n      // together as well\r\n      apps: [\"gmail\", \"linear\"],\r\n    });\r\n    console.log(\r\n      `[DEBUG]: Tools length: ${tools.length}. Errors out if greater than 128`,\r\n    );\r\n\r\n    const fullMessages = [\r\n      {\r\n        role: \"system\",\r\n        content: \"You are a helpful assistant that can use tools.\",\r\n      },\r\n      ...messages,\r\n    ];\r\n\r\n    const response = await client.chat.completions.create({\r\n      model: \"gpt-4o-mini\",\r\n      messages: fullMessages,\r\n      tools,\r\n      // tool_choice: \"auto\",\r\n    });\r\n\r\n    const aiMessage = response.choices[0].message;\r\n    const toolCalls = aiMessage.tool_calls || [];\r\n\r\n    if (toolCalls.length > 0) {\r\n      const toolResponses = [];\r\n\r\n      for (const toolCall of toolCalls) {\r\n        const res = await toolset.executeToolCall(toolCall);\r\n        toolResponses.push(res);\r\n        console.log(\"[DEBUG]: Executed tool call:\", res);\r\n      }\r\n\r\n      return NextResponse.json({\r\n        role: \"assistant\",\r\n        content: \"Successfully executed tool call(s) ðŸŽ‰ðŸŽ‰\",\r\n        toolResponses,\r\n      });\r\n    }\r\n\r\n    return NextResponse.json({\r\n      role: \"assistant\",\r\n      content: aiMessage.content || \"Sorry... got no response from the server\",\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    return NextResponse.json(\r\n      { error: \"Something went wrong!\" },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n\r\n// ------ For Local Server MCP connection ------\r\n// import { NextRequest, NextResponse } from \"next/server\";\r\n// import { initMCP, processQuery } from \"@/lib/mcp-client\";\r\n//\r\n// const SERVER_PATH =\r\n//   \"<built_mcp_server_path_index_js>\";\r\n//\r\n// export async function POST(req: NextRequest) {\r\n//   const { messages } = await req.json();\r\n//   const userQuery = messages[messages.length - 1]?.content;\r\n//\r\n//   if (!userQuery) {\r\n//     return NextResponse.json({ error: \"No query provided\" }, { status: 400 });\r\n//   }\r\n//\r\n//   try {\r\n//     await initMCP(SERVER_PATH);\r\n//\r\n//     const { reply, toolCalls, toolResponses } = await processQuery(messages);\r\n//\r\n//     if (toolCalls.length > 0) {\r\n//       return NextResponse.json({\r\n//         role: \"assistant\",\r\n//         content: \"Successfully executed tool call(s) ðŸŽ‰ðŸŽ‰\",\r\n//         toolResponses,\r\n//       });\r\n//     }\r\n//\r\n//     return NextResponse.json({\r\n//       role: \"assistant\",\r\n//       content: reply,\r\n//     });\r\n//   } catch (err) {\r\n//     console.error(\"[MCP Error]\", err);\r\n//     return NextResponse.json(\r\n//       { error: \"Something went wrong\" },\r\n//       { status: 500 },\r\n//     );\r\n//   }\r\n// }\r\n//\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,MAAM,UAAU,IAAI,2IAAA,CAAA,gBAAa;AACjC,MAAM,SAAS,IAAI,kJAAA,CAAA,SAAM,CAAC;IACxB,QAAQ,QAAQ,GAAG,CAAC,cAAc;AACpC;AAEO,eAAe,KAAK,GAAgB;IACzC,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;IAEnC,MAAM,YAAY,QAAQ,CAAC,SAAS,MAAM,GAAG,EAAE,EAAE;IACjD,IAAI,CAAC,WAAW;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAiC,GAC1C;YAAE,QAAQ;QAAI;IAElB;IAEA,IAAI;QACF,MAAM,QAAQ,MAAM,QAAQ,QAAQ,CAAC;YACnC,qEAAqE;YACrE,wDAAwD;YACxD,4BAA4B;YAC5B,EAAE;YACF,2BAA2B;YAC3B,mBAAmB;YACnB,EAAE;YACF,2CAA2C;YAC3C,6EAA6E;YAE7E,sEAAsE;YACtE,mBAAmB;YACnB,MAAM;gBAAC;gBAAS;aAAS;QAC3B;QACA,QAAQ,GAAG,CACT,CAAC,uBAAuB,EAAE,MAAM,MAAM,CAAC,gCAAgC,CAAC;QAG1E,MAAM,eAAe;YACnB;gBACE,MAAM;gBACN,SAAS;YACX;eACG;SACJ;QAED,MAAM,WAAW,MAAM,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YACpD,OAAO;YACP,UAAU;YACV;QAEF;QAEA,MAAM,YAAY,SAAS,OAAO,CAAC,EAAE,CAAC,OAAO;QAC7C,MAAM,YAAY,UAAU,UAAU,IAAI,EAAE;QAE5C,IAAI,UAAU,MAAM,GAAG,GAAG;YACxB,MAAM,gBAAgB,EAAE;YAExB,KAAK,MAAM,YAAY,UAAW;gBAChC,MAAM,MAAM,MAAM,QAAQ,eAAe,CAAC;gBAC1C,cAAc,IAAI,CAAC;gBACnB,QAAQ,GAAG,CAAC,gCAAgC;YAC9C;YAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,MAAM;gBACN,SAAS;gBACT;YACF;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,MAAM;YACN,SAAS,UAAU,OAAO,IAAI;QAChC;IACF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF,EAEA,gDAAgD;CAChD,2DAA2D;CAC3D,4DAA4D;CAC5D,EAAE;CACF,sBAAsB;CACtB,wCAAwC;CACxC,EAAE;CACF,iDAAiD;CACjD,2CAA2C;CAC3C,8DAA8D;CAC9D,EAAE;CACF,sBAAsB;CACtB,iFAAiF;CACjF,MAAM;CACN,EAAE;CACF,UAAU;CACV,kCAAkC;CAClC,EAAE;CACF,gFAAgF;CAChF,EAAE;CACF,kCAAkC;CAClC,mCAAmC;CACnC,6BAA6B;CAC7B,8DAA8D;CAC9D,yBAAyB;CACzB,YAAY;CACZ,QAAQ;CACR,EAAE;CACF,iCAAiC;CACjC,2BAA2B;CAC3B,wBAAwB;CACxB,UAAU;CACV,oBAAoB;CACpB,yCAAyC;CACzC,gCAAgC;CAChC,2CAA2C;CAC3C,yBAAyB;CACzB,SAAS;CACT,MAAM;CACN,IAAI;CACJ,EAAE","debugId":null}}]
}